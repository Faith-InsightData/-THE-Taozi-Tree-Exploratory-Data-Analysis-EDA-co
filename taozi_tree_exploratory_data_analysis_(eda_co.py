# -*- coding: utf-8 -*-
"""Taozi Tree Exploratory Data Analysis (EDA co

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zPXQY2NpwAeQ1VfccvLu4Y7_IK7vVhiO
"""

import pandas as pd

import pandas as pd

# Correct function for Excel files
df = pd.read_excel('/content/590982 - Affiliate data analysis export -2025-06-27T09_15_37.xlsx')

# Preview the first few rows
df.head()

""" Step 2: Import Libraries"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# For better visuals
sns.set(style="whitegrid")

"""PHASE 2: Inspect Column Names and Data Types"""

# View column names
print("Column Names:\n", df.columns.tolist())

# Check data types and null values
df.info()

# Quick summary statistics for numeric columns
df.describe()

"""PHASE 3: Data Cleaning — now that you've inspected the data, we'll:

✅ Clean column names

✅ Convert 'Recently trained' to numeric (days ago)

✅ Ensure 'Total Spending' is numeric

✅ Preview the cleaned result

STEP 4: Clean Column Names
We'll strip out extra characters like \t (tab) and spaces:
"""

# Clean column names: remove tabs and strip whitespace
df.columns = df.columns.str.replace('\t', '', regex=True).str.strip()

# Confirm cleaned column names
print("Cleaned Column Names:\n", df.columns.tolist())

""" STEP 5: Convert 'Recently trained' to Numeric                           
We'll extract the number of days (e.g., "5days ago" → 5):
"""

# Extract numeric days from 'Recently trained'
df['Recently trained (days ago)'] = df['Recently trained'].str.extract(r'(\d+)').astype(float)

# Check updated column
df[['Recently trained', 'Recently trained (days ago)']].head()

""" STEP 6: Convert 'Total Spending' to Numeric                                        
We'll make sure it's read correctly as numbers (just in case):
"""

# Convert 'Total Spending' to numeric
df['Total Spending'] = pd.to_numeric(df['Total Spending'], errors='coerce')

# Preview data
df[['Member\'s name', 'Total Spending']].head()

""" STEP 7: Verify Cleaned DataFrame
Final check before analysis:


"""

# Check null values and types
df.info()

# Preview cleaned dataset
df.head()

"""📊 Top 5 KPIs You Should Track                                                            
✅ 1. Total Active Members
Shows the total number of unique members in the dataset.
"""

total_members = df['Member\'s name'].nunique()
print(f"Total Unique Members: {total_members}")

"""2. High-Value Members
Tracks how many members are classified as "High-value."
"""

high_value_members = df[df['Membership Rating'] == 'High-value members'].shape[0]
print(f"High-Value Members: {high_value_members}")

"""✅ 3. Churn Risk Breakdown
Shows the number of members by churn risk level: No risk, Medium, High, etc.


"""

churn_risk_distribution = df['Churn risk'].value_counts()
print("Churn Risk Distribution:\n", churn_risk_distribution)

"""✅ 4. Top 10 Spenders                 
Helps identify which members spend the most — useful for loyalty and reward strategies.
"""

top_spenders = df[['Member\'s name', 'Total Spending']].sort_values(by='Total Spending', ascending=False).head(10)
print("Top 10 Spenders:\n", top_spenders)

"""✅ 5. Average 30-Day Activity
Tracks how engaged members are in the short term
"""

average_30_day_active = df['30-Day Active'].mean()
print(f"Average 30-Day Active Attendance: {average_30_day_active:.2f}")

"""coaches_list.value_counts"""

# Drop rows with missing coach info
coaches_series = df['Coaches'].dropna()

# Split by comma and strip spaces
coaches_list = coaches_series.str.split(',').explode().str.strip()

# Count frequency
coach_counts = coaches_list.value_counts()
coach_counts.head(10)

import matplotlib.pyplot as plt
import seaborn as sns

# Plot top 10 teachers
top_coaches = coach_counts.head(10)

plt.figure(figsize=(10, 5))
sns.barplot(x=top_coaches.values, y=top_coaches.index, palette='mako')
plt.title('Top 10 Most Mentioned Coaches')
plt.xlabel('Mentions')
plt.ylabel('Coach Name')
plt.tight_layout()
plt.show()

"""Insight (for report):
🌟 Star Teachers Insight
Based on member data, the most frequently mentioned instructors are:

Theresa 桃子老师

Kateryna

Guest Teacher

Tania May

Satya                                                                           
These coaches appear most often in member interactions, suggesting they are likely driving attendance and loyalty.
"""

# 📦 Step 1: Install required packages (run once per session)
!pip install pandas openpyxl matplotlib seaborn

# 📚 Step 2: Import libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime

# 🧼 Step 3: Load and clean data
file_path = '/content/590982 - Affiliate data analysis export -2025-06-27T09_15_37.xlsx'
df = pd.read_excel(file_path)

# Clean column names
df.columns = df.columns.str.replace('\t', '', regex=True).str.strip()

# Extract numeric days from 'Recently trained'
df['Recently trained (days ago)'] = df['Recently trained'].str.extract(r'(\d+)').astype(float)

# Convert spending to numeric
df['Total Spending'] = pd.to_numeric(df['Total Spending'], errors='coerce')

# 🧮 Step 4: Calculate KPIs
today = datetime.today().strftime('%B %d, %Y')

total_members = df["Member's name"].nunique()
high_value = df[df['Membership Rating'] == 'High-value members'].shape[0]
avg_activity_30 = df['30-Day Active'].mean()
churn_dist = df['Churn risk'].value_counts()

# Top spender
top_spender = df[['Member\'s name', 'Total Spending']].sort_values(by='Total Spending', ascending=False).iloc[0]
top_spender_name = top_spender["Member's name"]
top_spender_amount = top_spender["Total Spending"]

# 🎯 Step 5: Top Coaches (by frequency)
coaches_series = df['Coaches'].dropna().str.split(',').explode().str.strip()
coach_counts = coaches_series.value_counts()
top_coaches = coach_counts.head(5)

# 📊 Step 6: Visualizations

# Churn Risk Chart
plt.figure(figsize=(8, 4))
sns.countplot(data=df, x='Churn risk', palette='Set2')
plt.title('Churn Risk Distribution')
plt.xticks(rotation=45)
plt.tight_layout()
plt.savefig('/content/churn_risk.png')
plt.close()

# Top Coaches Chart
plt.figure(figsize=(8, 4))
top_coaches.plot(kind='barh', color='teal')
plt.gca().invert_yaxis()
plt.title('Top 5 Most Mentioned Coaches')
plt.xlabel('Mentions')
plt.tight_layout()
plt.savefig('/content/top_coaches.png')
plt.close()

# 📝 Step 7: Summary Report
print(f"""
📊 Weekly KPI Report — Taozi Tree Yoga
📅 Date: {today}

👥 Member Engagement
- Total Members: {total_members}
- High-Value Members: {high_value}
- Avg. 30-Day Activity: {avg_activity_30:.1f} visits/member

🔄 Churn Risk Breakdown:
{churn_dist.to_string()}

💰 Top Spender:
- {top_spender_name}: ¥{top_spender_amount:.2f}

🌟 Star Coaches (Top 5):
{top_coaches.to_string()}

✅ Files saved:
- churn_risk.png
- top_coaches.png
- cleaned_member_data.xlsx
""")

# 💾 Step 8: Save Cleaned Data
df.to_excel('/content/cleaned_member_data.xlsx', index=False)

"""Total Number of Active Members                  
Definition: Count of members who attended at least 1 class in the past 30 or 90 days.
"""

# 30-day active members
active_30 = df[df['30-Day Active'] > 0].shape[0]

# 90-day active members
active_90 = df[df['90-Day Active'] > 0].shape[0]

print(f"30-Day Active Members: {active_30}")
print(f"90-Day Active Members: {active_90}")

"""✅ 2. Revenue from High-Value vs. Ordinary Members              
Definition: Total revenue (Total Spending) from members segmented by their "Membership Rating.
"""

# Group total spending by Membership Rating
revenue_by_group = df.groupby('Membership Rating')['Total Spending'].sum().sort_values(ascending=False)

print("Revenue by Membership Rating:")
print(revenue_by_group)

"""Revenue by Member Type"""

revenue_by_group.plot(kind='bar', color='skyblue', title='Revenue by Member Type')
plt.ylabel('Total Revenue (¥)')
plt.tight_layout()
plt.show()

"""✅ Simplest Fix — Translate/Replace Non-English Labels
Before plotting, replace any Chinese churn labels with their English equivalents to avoid missing glyph warnings.

Here's how you can clean them up before the chart:
"""

# Mapping of Chinese → English churn risk categories
churn_mapping = {
    '高风险': 'High risk',
    '中风险': 'Medium risk',
    '无流失风险': 'No risk of churn'
}

# Apply mapping to churn risk column
df['Churn risk'] = df['Churn risk'].replace(churn_mapping)

"""Churn Risk Distribution"""

# Count churn risk categories (after cleaning)
churn_dist = df['Churn risk'].value_counts()

print("Churn Risk Distribution:")
print(churn_dist)

# Pie chart
churn_dist.plot(kind='pie', autopct='%1.1f%%', startangle=90, figsize=(6, 6), title='Churn Risk')
plt.ylabel('')
plt.tight_layout()
plt.show()

"""✅ 3. Churn Risk Distribution                      
Definition: Distribution of members by churn risk level.
"""

kpi_data = {
    '30-Day Active Members': active_30,
    '90-Day Active Members': active_90,
    'High-Value Revenue': revenue_by_group.get('High-value members', 0),
    'Ordinary Revenue': revenue_by_group.get('Ordinary members', 0)
}
pd.DataFrame([kpi_data]).to_csv('/content/member_kpis.csv', index=False)

# Install Noto Sans CJK (Google's Chinese/Japanese/Korean font)
!apt-get -qq install fonts-noto-cjk

# Use it as the default font for Matplotlib
import matplotlib.pyplot as plt
plt.rcParams['font.family'] = 'Noto Sans CJK SC'

import matplotlib as mpl
mpl.rcParams.update(mpl.rcParamsDefault)

mpl.rcParams['font.family'] = 'DejaVu Sans'  # Colab default font

plt.rcParams['font.sans-serif'] = ['Arial Unicode MS', 'SimHei', 'DejaVu Sans']

"""✅ 1. Total Number of Active Members
Definition: Count of members who attended at least 1 class in the past 30 or 90 days.
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import matplotlib as mpl

# Use built-in safe font
mpl.rcParams['font.family'] = 'DejaVu Sans'

# Assume df is already loaded and cleaned
df.columns = df.columns.str.strip().str.replace("'", "").str.replace(" ", "_")

# Revenue by Membership Rating
revenue_group = df.groupby('Membership_Rating')['Total_Spending'].sum().reset_index()

# Plot
plt.figure(figsize=(8, 5))
sns.barplot(
    data=revenue_group,
    x='Total_Spending',
    y='Membership_Rating',
    hue='Membership_Rating',         # Fix FutureWarning
    palette='viridis',
    legend=False                     # Hide legend (optional)
)
plt.title('Total Revenue by Membership Rating')
plt.xlabel('Total Spending')
plt.ylabel('Membership Rating')
plt.tight_layout()
plt.show()

# Clean column names
df.columns = df.columns.str.strip().str.replace('’', "'").str.replace('–', '-')

# Optional: rename to make life easier
df.rename(columns={
    "Member's name": "Member_Name",
    "30-Day Active": "Active_30_Day"
}, inplace=True)

"""✅  Popular Coaches
Most frequently mentioned coaches:
"""

import matplotlib.pyplot as plt
import seaborn as sns
import matplotlib

# Use a font that supports Chinese characters, e.g., Noto Sans CJK
plt.rcParams['font.sans-serif'] = ['Noto Sans CJK SC']  # If installed
plt.rcParams['axes.unicode_minus'] = False  # Prevent minus sign issues

!apt-get install -y fonts-noto-cjk

import matplotlib.pyplot as plt
plt.rcParams['font.sans-serif'] = ['Noto Sans CJK SC']
plt.rcParams['axes.unicode_minus'] = False

import matplotlib.pyplot as plt
import seaborn as sns
import pandas as pd

# Set CJK-compatible font
plt.rcParams['font.sans-serif'] = ['Noto Sans CJK SC']  # Or ['Microsoft YaHei'] on Windows
plt.rcParams['axes.unicode_minus'] = False

# Process and count coach mentions
coaches_series = df['Coaches'].dropna().str.split(',').explode().str.strip()
coach_counts = coaches_series.value_counts().head(10)

# Plot
plt.figure(figsize=(10, 5))
sns.barplot(x=coach_counts.values, y=coach_counts.index, palette='viridis', legend=False)
plt.title('Top 10 Most Popular Coaches')
plt.xlabel('Mentions')
plt.ylabel('Coach Name')
plt.tight_layout()
plt.show()

"""Save All Charts"""

plt.savefig('/content/top_members_attendance.png')
plt.savefig('/content/revenue_by_type.png')
plt.savefig('/content/churn_risk_pie.png')
plt.savefig('/content/popular_coaches.png')

""" A. High Churn-Risk Members with Low Attendance
These members are at risk and haven’t been active — this is a red flag.
"""

print(df.columns.tolist())

""" Analysis & Reporting, where you'll extract insights from the cleaned member data and deliver a short, sharp executive summary to Ross.

A. High Churn-Risk Members with Low Attendance
"""

# Filter: High churn risk & low 30-day attendance
at_risk_low_attendance = df[(df['Churn_risk'] == 'High Risk') & (df['30-Day_Active'] <= 1)]

print(f"High churn-risk members with low attendance: {at_risk_low_attendance.shape[0]}")

# Display the relevant columns
at_risk_low_attendance[['Members_name', '30-Day_Active', 'Total_Spending']]

""" B. Medium-Risk but High-Spending Members"""

# Filter: High churn risk & low 30-day attendance
at_risk_low_attendance = df[(df['Churn_risk'] == 'High Risk') & (df['30-Day_Active'] <= 1)]

print(f"High churn-risk members with low attendance: {at_risk_low_attendance.shape[0]}")

# Display relevant columns
print(at_risk_low_attendance[['Members_name', '30-Day_Active', 'Total_Spending']])

""" C. Low-Activity, High-Spending Members"""

# High spenders but low activity
low_active_high_spend = df[(df['Total_Spending'] > 300) & (df['30-Day_Active'] <= 2)]
print(f"Loyal spenders with low activity: {low_active_high_spend.shape[0]}")

# Display relevant columns
print(low_active_high_spend[['Members_name', 'Total_Spending', '30-Day_Active']])

"""✅ 3. Exploratory Data Analysis (EDA)"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

# Optional: Clean column names
df.columns = df.columns.str.strip().str.replace('’', "'").str.replace('–', '-').str.replace(' ', '_')

# Rename key columns for consistency
df.rename(columns={
    "Member's_name": "member_name",
    "30-Day_Active": "active_30d",
    "90-Day_Active": "active_90d",
    "Total_Spending": "spend_total",
    "Recently_trained_(days_ago)": "days_since_last_class",
    "Membership_Rating": "member_rating",
    "Churn_risk": "churn_risk",
    "Coaches": "coach_list"
}, inplace=True)

"""Univariate Analysis
1. Distribution of days_since_last_class

2. Histogram of active_30d and active_90d
"""

print(df.columns.tolist())

import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd

# Histogram of 'days_since_last_class'
sns.histplot(df['days_since_last_class'].dropna(), bins=20, kde=True)
plt.title('Distribution of Days Since Last Class')
plt.xlabel('Days Since Last Class')
plt.ylabel('Frequency')
plt.show()

sns.histplot(df['active_30d'].dropna(), bins=20, kde=True)
plt.title('30-Day Activity Distribution')
plt.xlabel('Classes Attended (30 Days)')
plt.ylabel('Frequency')
plt.show()

"""Correlation between active_30d and spend_total"""

sns.scatterplot(data=df, x='active_30d', y='spend_total')
plt.title('Activity vs. Spending')
plt.xlabel('30-Day Activity')
plt.ylabel('Total Spending')
plt.show()

churn_group = df.groupby('churn_risk')['spend_total'].mean().reset_index()
sns.barplot(data=churn_group, x='churn_risk', y='spend_total', palette='viridis')
plt.title('Churn Risk vs. Average Spending')
plt.xlabel('Churn Risk')
plt.ylabel('Average Spending')
plt.xticks(rotation=45)
plt.show()